/*
1. 다리 위를 지나는 트럭의 무게를 Queue에 담기
2. int[] truck_weights를 for문 돌리지만 그 안에 while()문을 돌려
   한 트럭마다의 소요시간을 더함
3. 다리위의 트럭의 무게가 그 뒤에 올 트럭의 무게를 합쳤을 때 다리가 견딜 수 있는 무게를 초과한다면
   현재 다리위의 트럭을 다리를 지나가게 하기 위해
   qu.add(0); 0씩 더해줘서 
   다리의 길이와 Queue의 사이즈를 맞춰준다.
4. 다리의 길이 == Queue의 사이즈이면 한 트럭 빼주기 qu.poll()
5. 마지막 트럭이 다리에 올라감과 동시에 break가 걸리기 때문에
   마지막 소요시간에 마지막 트럭이 다리를 건너는 시간을 따로 더해줘야함(== 다리 길이만큼 더해줌)
*/

import java.util.*;

class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        Queue<Integer> qu = new LinkedList<>(); // 다리위를 지나는 트럭의 queue
        int sum = 0;  // 다리위의 트럭 무게
        int time = 0; // 소요시간

        for (int i = 0; i < truck_weights.length; i++) {
            while(true) {
                if (qu.isEmpty()) {
                    // 다리 위를 지나는 트럭이 없을 때

                    qu.add(truck_weights[i]);
                    sum += truck_weights[i];
                    time++;
                    break; // 한 트럭 올렸으니 바로 다음 트럭으로

                } else if (qu.size() == bridge_length) {
                    // 다리 위에 이미 트럭이 있고, 기존 트럭이 다리의 끝에 도달했다는 것
                    // -> 기존 트럭을 queue에서 삭제

                    sum -= qu.poll();

                } else if (sum + truck_weights[i] <= weight) {
                    // 예측 sum이 다리가 견딜 수 있는 무게보다 작거나 같을 때

                    qu.add(truck_weights[i]);
                    sum += truck_weights[i];
                    time++;
                    break;

                } else {
                    // 예측 sum이 다리가 견딜 수 있는 무게보다 클 때
                    // 기존에 있는 트럭을 건너게 해준다 
                    // -> qu에 0을 넣어서 size()와 bridge_length비교하겠금

                    qu.add(0);
                    time++;
                }
            }
        }

        // + bridge_length를 마지막에 하는 이유
        // -> 마지막 트럭이 올라갔을때 break를 걸어두었기 때문에 마지막 트럭이 다리를 건너는 시간을 더해줌
        int answer = time;

        return answer + bridge_length;
    }
}
